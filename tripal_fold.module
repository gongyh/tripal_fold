<?php
define("UPLOAD_Base_Path", "public://pdb");
/**
* @file
* Basic functionality for tripal fold module.
*/

/** 
* Implements hook_help()
*
* Display help and module information
*
* @ingroup tripal_fold
*/

function tripal_fold_help($path, $arg) {
    if($path == 'admin/help#tripal_fold' || $path == 'admin/tripal/extension/tripal_fold/help') {
	return t('Protein Structure Mapping Module');
    }
}

/**
* Implements hook_permission().
* 
* Set the permissions types used by the tripal protein structure module.
*
* @ingroup tripal_fold
*/

function tripal_fold_permission() {
    return array(
	'use tripal_fold module' => array(
	    'title' => t('Administer Tripal_fold'),
	    'description' => t('Allow users to browse three-dimensional structure of proteins'),
	    )
    );
}

/**
* Implements hook_menu().
* @ingroup tripal_fold
*/

function tripal_fold_menu() {
    $items = array();
    $items['tripal/upload_pdb_files'] = array(
	'title' => 'pdb files upload',
	'description' => 'Upload pdb files',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('tripal_pdb_files_load_form'),
	'access arguments' => array('use tripal_fold module'),
	'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
* Form to upload pdb files to print three-dimensional structure of proteins
* @ingroup tripal_fold
*/

function tripal_pdb_files_load_form($form, &$form_state) {
    $dorganism_id = '';
    $dfeature_id = '';
    if(!is_null($_SESSION) && array_key_exists('tripal_fold_load', $_SESSION)) {
	$dorganism_id = $_SESSION['tripal_fold_load']['organism_id'];
	$dfeature_id = $_SESSION['tripal_fold_load']['feature_id'];
    }

    if(array_key_exists('organism_id', $_GET) and $_GET['organism_id']) {
	$dorganism_name = $_GET['organism_id'];
    }
    if(array_key_exists('feature_id', $_GET) and $_GET['feature_id']) {
	$dfeature_id = $_GET['feature_id'];
    }

    // get defaults from the form state
    if(array_key_exists('values', $form_state)) {
 	$dorganism_id = $form_state['values']['organism_id'];
	$dfeature_id = $form_state['values']['feature_id'];
    }	
    
    $sql = "SELECT DISTINCT organism_id,common_name FROM {organism} ORDER BY organism_id";
    $results = chado_query($sql);
    $organism_id = array();
    $organism_id[] = '';
    while ($organism = $results->fetchObject()) {
	$organism_id[$organism->organism_id] = $organism->common_name;
    }
    $form = array();
    $form['organism_id'] = array(
	'#title' => t('Common name'),
	'#type' => 'select',
	'#options' => $organism_id,
	'#default_value' => $dorganism_id,
	'#multiple' => FALSE,
	'#required' => TRUE,
	'#description' => t('Choose organism to specify pdb files belong to'),
	'#ajax' => array(
	    'callback' => 'tripal_pdb_files_load_form_ajax_callback',
	    'wrapper' => 'tripal-pdb-files-load-form',
	    'event' => 'change',
	    'method' => 'replace',
        ),
    );

    $feature = array();
    $features = array();
    $features[] = '';
    if ($dorganism_id) {
	$sql = "SELECT DISTINCT feature_id,name FROM {feature} WHERE organism_id = :organism_id";
	$args = array();
	$args[':organism_id'] = $dorganism_id;
	$sql .= " ORDER BY feature_id";
	$results = chado_query($sql, $args);
	while($feature = $results->fetchObject()) {
	    $features[$feature->feature_id] = $feature->name;
        }
    }
    $form['feature_id'] = array(
	'#title' => t('feature'),
	'#type' => 'select',
	'#options' => $features,
	'#multiple' => FALSE,
	'#description' => t('choose feature to specify pdb files belong to'),
	'#required' => TRUE,
	'#default_value' => $dfeature_id,
	'#validated' => TRUE,
    );
    $form['file'] = array(
	'#type' => 'managed_file',
	'#title' => 'pdb files', 
	'#description' => 'Upload pdb files',
	'#upload_location' => UPLOAD_Base_Path,
	'#upload_validators' => array(
	    'file_validate_extensions' => array('pdb'),
	)
    );
    $form['submit'] = array(
	'#type' => 'submit',
	'#value' => 'upload',
    );
    return $form;
}

/**
* Ajax function which returns the form via ajax
*/
function tripal_pdb_files_load_form_ajax_callback($form, &$form_state) {
    return $form;
}

function tripal_pdb_files_load_form_submit($form, &$form_state) {
    $file = file_load($form_state['values']['file']);
    $feature_id = $form_state['values']['feature_id'];
    $file->status = FILE_STATUS_PERMANENT;
    $uri = $file->uri;
    file_save($file);
    db_insert('tripal_fold')->fields(array('feature_id' => $feature_id, 'pdb_loc' => $uri))->execute();
    drupal_set_message(t('files upload success'));
}

/**
* Implements hook_theme().
* @ingroup tripal_fold
*/
function tripal_fold_theme($existing, $type, $theme, $path) {
    $items = array(
	'tripal_fold_main' => array(
	    'variables' => array('node' => NULL),
	    'template' => 'tripal_fold_main',
	    'path' => "$path/theme/templates",
	),
    );
    return $items;
}
